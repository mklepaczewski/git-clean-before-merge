#!/bin/bash

#
# Cleans up repo before git merge:
# - modified files that are the same with the merge branch are reverted to the state from current commit
#   i.e. git checkout the_file
# - untracked files that exist in the merge branch and are the same are removed
#
# Optional parameters:
# --pretend - list actions that would be performed, but do nothing
# --debug - display debugging info
# 
# Todo:
# - error and sanity checks!
# - don't rely on bash
# - if we use some command, we need to make sure that it exists first
# - corretly infer remote tracking branch if no branch has been given on command line
# - instead of checking if modified/untracked file is the same as on the tip of the merge branch
#   check if it exists in any of commits between our local commit and the tip of the merge branch.
#   If it exists in any of those commits then most probably we can discard our local changes, as
#   at some point in time in the repo history we had our current state and we updated on it, so it
#   should be safe to use the most recent version of the file
#   Also, if it has been removed then:
#   - revert it to original state (git checkout the_file) if it's a tracked file
# - rename debug_msg() to msg_debug()

# Default options
OPT_PRETEND="false"
OPT_DEBUG="false"
OPT_BRANCH=""

function debug_msg() {
	if [ "${OPT_DEBUG}" != "true" ]; then
		return
	fi
	echo -e "$1"
}

function msg_info() {
    echo -e "[I] Info: $1"
}

function msg_error() {
    echo -e "[E] Erorr: $1"
}

function revert_file() {
	local FILE="$1"
	
	echo "[C] Identical with remote, checking out ${FILE}"
	if [ "${OPT_PRETEND}" == "false" ]; then
		git checkout "${FILE}"
	fi
}

function warn_hash_differ() {
	local FILE="$1"
	local LOCAL_HASH="$2"
	local REMOTE_HASH="$3"

	echo "[!] Hashes differ for ${FILE} local: ${LOCAL_HASH} remote: ${REMOTE_HASH}"
}

function remove_untracked_file() {
	local FILE="$1"

        echo "[R] Untracked file found and identical with remote tip, removing: ${FILE}"
	if [ "${OPT_PRETEND}" == "false" ]; then
		rm -f "${FILE}"
	fi
}

function handle_file() {
	local FILE="$1"
	local FILE_TYPE="$2"
	local REMOTE_BRANCH_FILE="${REMOTE_BRANCH}:${FILE}"
	
	debug_msg "REMOTE_BRANCH_FILE: $REMOTE_BRANCH_FILE"
	
	# We need to capture output and exit status, "local" will always return 0
	local REMOTE_FILE_HASH
	REMOTE_FILE_HASH=$( git rev-parse "${REMOTE_BRANCH_FILE}" 2>/dev/null )
	
	# Handle errors, like file not found
	if [ "$?" -eq 128 ]; then
		# if this is untracked file then that's expected and we can just quit
		if [ "${FILE_TYPE}" == "untracked" ]; then
		    debug_msg "Got error 128 on untracked file, this is expected. Skiping the file '$FILE'"
		    return
		fi

		# Check if the file is marked as deleted
		local IS_LOCAL_FILE_DELETED=$( is_local_file_deleted "$FILE" )
		if [ "$IS_LOCAL_FILE_DELETED" == "true" ]; then
		  debug_msg "Detected deleted file. Checking if remote file is also deleted '$FILE'"
		  if [ $( is_merge_file_deleted "$REMOTE_FILE" ) == "true" ]; then
		    msg_info "Detected deleted file, remote is deleted too. Checking out to be deleted: '$FILE'"
		    git checkout "$FILE"
      else
        msg_error "[E] Local file is deleted, but remote is not: '$FILE'"
      fi
		  return
	  fi

		msg_error "[E] Error, file not found maybe? ${FILE}"
		return
	fi

	local FILE_HASH=$( git hash-object "${FILE}" )
	
	if [ "${FILE_HASH}" == "${REMOTE_FILE_HASH}" ]; then
		if [ "${FILE_TYPE}" == "untracked" ]; then
		    remove_untracked_file "${FILE}"
		else
		    revert_file "${FILE}"
		fi
	else
	  # If the modified file had hash X before modification and its hash in REMOTE_BRANCH_FILE is also X we can skip it
	  local LOCAL_BRANCH_FILE="${LOCAL_BRANCH}:${FILE}"
	  local LOCAL_COMMIT_FILE_HASH=$( git rev-parse "${LOCAL_BRANCH_FILE}" 2>/dev/null)
	  # We can skip reporting the file if current branch hash and remote branch hash are the same
	  if [ "${LOCAL_COMMIT_FILE_HASH}" != "${REMOTE_FILE_HASH}" ]; then
	    # The file has been modified in upstream and the hashes don't match - definietely something we need to know about
		  warn_hash_differ "${FILE}" "${FILE_HASH}" "${REMOTE_FILE_HASH}"
		fi
	fi
}

function is_local_file_deleted() {
  local FILE="$1"

  OUTPUT=$( git status --porcelain=1 "$FILE" | grep '^\sD ' | wc -l )
  if [ $OUTPUT -eq 1 ]; then
    echo "true"
  else
    echo "false"
  fi
}

function is_merge_file_deleted() {
  local REMOTE_FILE="$1"

  git cat-file -e "$REMOTE_FILE" 2>/dev/null

  if [ "$?" -eq 0 ]; then
    echo "false"
  else
    echo "true"
  fi
}

function git_ref_exist() {
    git show-ref --verify --quiet "refs/$1"
    
    if [ "$?" -eq 0 ]; then
	echo "true";
    else
	echo "false";
    fi
}

function branch_exist() {
    local BRANCH="$1"
    
    # Check for local and remote branches
    if [ $( git_ref_exist "heads/$BRANCH" ) = "true" ]; then
	echo "true";
    elif [ $( git_ref_exist "remotes/$BRANCH" ) = "true" ]; then
	echo "true"
    else
	echo "false";
    fi
}

# Parse options
for param in "$@"; do
    case "$param" in
	-p|--pretend)
	    OPT_PRETEND="true"
	    shift
	;;
	--debug)
	    OPT_DEBUG="true"
	    shift
	;;
	-*|--*)
	    msg_error "Unknown parameter '$param'"
	    exit 128
	;;
	*)
	    if [ ! -z "$OPT_BRANCH" ]; then
		msg_error "Too many arguments, this command accepts one optional parameter - branch name, but already got that: $OPT_BRANCH"
		exit 128
	    fi
	    OPT_BRANCH="$param"
	    debug_msg "Got branch name from command line: '$OPT_BRANCH'"
	    shift
	;;
    esac
done

# First, get remote tracking branch
LOCAL_BRANCH=$( git rev-parse --abbrev-ref HEAD )
debug_msg "Local branch: '$LOCAL_BRANCH'"

if [ -z "$OPT_BRANCH" ]; then
    debug_msg "Detecting branch name as it hasn't been provided on cmd line"
    REMOTE_BRANCH=$( git for-each-ref --format='%(upstream:short)' "$(git symbolic-ref -q HEAD)" )
    # Handle the case when there's no tracking branch
    if [ -z "$REMOTE_BRANCH" ]; then
      msg_error "Tracking branch doesn't exist? - can't continue. Provide branch name explicitly on command line"
      exit 128
    fi
    debug_msg "Detected REMOTE_BRANCH: $REMOTE_BRANCH"
else
    REMOTE_BRANCH="$OPT_BRANCH"
fi

debug_msg "REMOTE_BRANCH: $REMOTE_BRANCH"

# Make sure we see REMOTE_BRANCH
BRANCH_EXIST=$( branch_exist "$REMOTE_BRANCH" )

if [ "$BRANCH_EXIST" == "false" ]; then
    msg_error "Error: Branch doesn't exist: '$REMOTE_BRANCH'"
    msg_info "If it's a remote branch that doesn't exist locally execute\n git fetch <remote> <srcBranch>:<dstBranch>\n git fetch origin $REMOTE_BRANCH:$REMOTE_BRANCH"
    exit 128
else
    debug_msg "Branch exist: '$REMOTE_BRANCH'"
fi

### Handle modified files
debug_msg "Handling files already known to Git"
while IFS= read -r -d '' FILE; do
	handle_file "${FILE}"
done < <( git ls-files -z -m )

# Untracked files
debug_msg "Handling untracked files"
while IFS= read -r -d '' FILE; do
        handle_file "${FILE}" "untracked"
done < <( git ls-files -z --others --exclude-standard )
